pipeline {
    agent {
        kubernetes {
            yaml '''
kind: Pod
spec:
  containers:
  - name: docker-buildx
    image: docker:25-dind
    securityContext:
      privileged: true
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /root/.docker
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2376
    - name: DOCKER_TLS_CERTDIR
      value: ""
  - name: docker-daemon
    image: docker:25-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: harbor-credentials
          items:
            - key: .dockerconfigjson
              path: config.json
            '''
        }
    }

    parameters {
        string(name: 'APP_NAME', defaultValue: 'iot-driver', description: '应用名称')
        string(name: 'APP_VERSION', defaultValue: '1.0.0', description: '应用版本')
        string(name: 'BUILD_CONTEXT', defaultValue: 'example_direct_upload', description: '构建上下文目录')
        choice(name: 'IMAGE_TAG_STRATEGY', choices: ['version-build', 'timestamp', 'latest'], description: '镜像标签策略')
        // 多平台参数 - 支持真正的多架构
        choice(name: 'BUILD_PLATFORMS', 
               choices: ['linux/amd64,linux/arm64', 'linux/amd64', 'linux/arm64'], 
               description: '构建平台选择 (多平台用逗号分隔)')
        string(name: 'BUILD_UNIQUE_ID', defaultValue: '', description: '构建唯一标识符')
        stashedFile(name: 'BUILD_ARCHIVE', description: '上传包含构建上下文的压缩文件')
    }

    environment {
        HARBOR_REGISTRY = "registry.test.shifu.dev"
        HARBOR_PROJECT = "test-project"
        DOCKER_USER = "admin"
        DOCKER_PASS = 'harbor-credentials'
        
        IMAGE_NAME = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${params.APP_NAME}"
        IMAGE_TAG = generateImageTag()
        
        DOCKERFILE_PATH = "${params.BUILD_CONTEXT}/Dockerfile"
        BUILD_CONTEXT_PATH = "${params.BUILD_CONTEXT}"
        
        BUILD_PLATFORMS = "${params.BUILD_PLATFORMS}"
    }

    stages {
        stage("清理工作空间") {
            steps {
                cleanWs()
            }
        }

        stage("处理上传文件") {
            steps {
                script {
                    echo "📦 开始处理上传的构建文件"
                    
                    unstash 'BUILD_ARCHIVE'
                    
                    // 检查文件并解压
                    def uploadedArchive = env.BUILD_ARCHIVE_FILENAME ?: 'BUILD_ARCHIVE'
                    
                    echo "📂 开始解压文件: ${uploadedArchive}"
                    
                    // 根据文件类型解压
                    if (uploadedArchive.endsWith('.zip')) {
                        unzip zipFile: uploadedArchive, quiet: false
                    } else if (uploadedArchive.endsWith('.tar.gz') || uploadedArchive.endsWith('.tgz')) {
                        untar file: uploadedArchive, compression: 'gzip', quiet: false
                    } else if (uploadedArchive.endsWith('.tar')) {
                        untar file: uploadedArchive, quiet: false
                    } else {
                        // 尝试通用解压方法
                        try {
                            unzip zipFile: uploadedArchive, quiet: false
                        } catch (Exception zipEx) {
                            untar file: uploadedArchive, compression: 'gzip', quiet: false
                        }
                    }
                    
                    // 验证构建文件
                    sh """
                        if [ ! -d "${BUILD_CONTEXT_PATH}" ]; then
                            echo "❌ 错误: 构建目录 ${BUILD_CONTEXT_PATH} 不存在"
                            find . -type d -maxdepth 2
                            exit 1
                        fi
                        
                        if [ ! -f "${DOCKERFILE_PATH}" ]; then
                            echo "❌ 错误: Dockerfile ${DOCKERFILE_PATH} 不存在"
                            ls -la ${BUILD_CONTEXT_PATH}/
                            exit 1
                        fi
                        
                        echo "✅ 构建文件验证通过"
                        echo "📁 构建目录内容:"
                        ls -la ${BUILD_CONTEXT_PATH}/
                    """
                }
            }
        }

        stage("设置 Docker Buildx") {
            steps {
                container('docker-buildx') {
                    script {
                        echo "🔧 设置 Docker Buildx 多平台构建"
                        
                        sh '''
                            # 等待 Docker daemon 启动
                            timeout 30s sh -c 'until docker info > /dev/null 2>&1; do sleep 1; done'
                            
                            # 启用实验性功能
                            mkdir -p ~/.docker
                            echo '{"experimental": "enabled"}' > ~/.docker/config.json
                            
                            # 安装 QEMU 用于模拟
                            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
                            
                            # 创建并使用 buildx 构建器
                            docker buildx create --name multiarch-builder --driver docker-container --use || true
                            docker buildx use multiarch-builder
                            docker buildx inspect --bootstrap
                            
                            # 显示支持的平台
                            echo "🏗️  支持的构建平台:"
                            docker buildx ls
                        '''
                    }
                }
            }
        }

        stage("构建多平台镜像") {
            steps {
                container('docker-buildx') {
                    script {
                        echo "🚀 开始多平台镜像构建"
                        
                        sh """
                            echo "🏗️  构建配置"
                            echo "构建平台: ${BUILD_PLATFORMS}"
                            echo "镜像名称: ${IMAGE_NAME}"
                            echo "镜像标签: ${IMAGE_TAG}"
                            echo "Dockerfile: ${DOCKERFILE_PATH}"
                            echo "构建上下文: ${BUILD_CONTEXT_PATH}"
                            
                            # 显示构建上下文
                            echo "📂 构建上下文内容:"
                            ls -la ${BUILD_CONTEXT_PATH}/
                            
                            # 构建并推送多平台镜像
                            echo "🔨 开始构建多平台镜像"
                            docker buildx build \\
                                --platform ${BUILD_PLATFORMS} \\
                                --file ${DOCKERFILE_PATH} \\
                                --context ${BUILD_CONTEXT_PATH} \\
                                --tag ${IMAGE_NAME}:${IMAGE_TAG} \\
                                --tag ${IMAGE_NAME}:latest \\
                                --push \\
                                --progress plain
                            
                            echo "✅ 多平台镜像构建并推送完成"
                            
                            # 显示推送的镜像信息
                            echo "📦 推送的多平台镜像:"
                            echo "   - ${IMAGE_NAME}:${IMAGE_TAG} (${BUILD_PLATFORMS})"
                            echo "   - ${IMAGE_NAME}:latest (${BUILD_PLATFORMS})"
                            
                            # 检查 manifest
                            echo "🔍 验证多平台 manifest:"
                            docker buildx imagetools inspect ${IMAGE_NAME}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage("验证多平台镜像") {
            steps {
                container('docker-buildx') {
                    script {
                        echo "🔍 验证多平台镜像"
                        
                        sh """
                            echo "📋 镜像验证信息:"
                            echo "仓库地址: ${HARBOR_REGISTRY}"
                            echo "项目: ${HARBOR_PROJECT}"
                            echo "镜像: ${params.APP_NAME}:${IMAGE_TAG}"
                            echo "支持平台: ${BUILD_PLATFORMS}"
                            
                            # 检查每个平台的镜像
                            echo "🔍 检查各平台镜像详情:"
                            docker buildx imagetools inspect ${IMAGE_NAME}:${IMAGE_TAG} --raw
                            
                            echo "✅ 多平台镜像验证完成"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "🧹 清理构建环境"
            }
        }
        success {
            script {
                echo "🎉 多平台构建成功!"
                echo "📦 多平台镜像已推送到: ${IMAGE_NAME}:${IMAGE_TAG}"
                echo "📦 支持平台: ${BUILD_PLATFORMS}"
                echo "🔗 可通过以下命令检查: docker buildx imagetools inspect ${IMAGE_NAME}:${IMAGE_TAG}"
            }
        }
        failure {
            script {
                echo "❌ 多平台构建失败!"
            }
        }
    }
}

// 生成镜像标签的函数
def generateImageTag() {
    def strategy = params.IMAGE_TAG_STRATEGY ?: 'version-build'
    
    switch(strategy) {
        case 'version-build':
            return "${params.APP_VERSION}"
        case 'timestamp':
            return "${params.APP_VERSION}-${new Date().format('yyyyMMdd-HHmmss')}"
        case 'latest':
            return 'latest'
        default:
            return "${params.APP_VERSION}"
    }
} 