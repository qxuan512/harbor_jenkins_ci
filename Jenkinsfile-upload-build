pipeline {
    agent {
        kubernetes {
            yaml '''
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 9999999
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /kaniko/.docker
    env:
    - name: DOCKER_CONFIG
      value: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: harbor-credentials
          items:
            - key: .dockerconfigjson
              path: config.json
            '''
        }
    }

    parameters {
        // 允许外部程序通过参数触发构建
        string(name: 'APP_NAME', defaultValue: 'iot-driver', description: '应用名称')
        string(name: 'APP_VERSION', defaultValue: '1.0.0', description: '应用版本')
        string(name: 'BUILD_CONTEXT', defaultValue: 'example_direct_upload', description: '构建上下文目录')
        choice(name: 'IMAGE_TAG_STRATEGY', choices: ['version-build', 'timestamp', 'latest'], description: '镜像标签策略')
        // 构建平台参数 - 支持多平台构建
        choice(name: 'BUILD_PLATFORMS', 
               choices: ['linux/amd64', 'linux/arm64', 'linux/amd64,linux/arm64'], 
               description: '构建平台选择 (支持多平台并行构建)')
        // 唯一ID参数，确保每个构建job的唯一性
        string(name: 'BUILD_UNIQUE_ID', defaultValue: '', description: '构建唯一标识符 (可选，用于确保构建的唯一性，留空则自动生成)')
        // 添加文件上传参数
        stashedFile(name: 'BUILD_ARCHIVE', description: '上传包含构建上下文的压缩文件 (支持 .zip, .tar, .tar.gz)')
    }

    environment {
        // Harbor 仓库配置
        HARBOR_REGISTRY = "registry.test.shifu.dev"
        HARBOR_PROJECT = "test-project"
        DOCKER_USER = "admin"
        DOCKER_PASS = 'harbor-credentials'  // Jenkins 凭据 ID
        
        // 镜像配置
        IMAGE_NAME = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${params.APP_NAME}"
        IMAGE_TAG = generateImageTag()
        
        // 构建配置
        DOCKERFILE_PATH = "${params.BUILD_CONTEXT}/Dockerfile"
        BUILD_CONTEXT_PATH = "${params.BUILD_CONTEXT}"
        
        // 平台配置
        BUILD_PLATFORMS = "${params.BUILD_PLATFORMS}"
    }

    stages {
        stage("清理工作空间") {
            steps {
                cleanWs()
            }
        }

        stage("处理上传文件") {
            steps {
                script {
                    echo "📦 开始处理上传的构建文件"
                    
                    // 获取上传文件的原始文件名
                    def originalFilename = env.BUILD_ARCHIVE_FILENAME
                    echo "上传文件名: ${originalFilename}"
                    
                    // 从 stash 中恢复上传的文件
                    unstash 'BUILD_ARCHIVE'
                    
                    // 检查文件并确定实际文件名
                    sh """
                        echo "📋 检查上传文件信息..."
                        ls -la BUILD_ARCHIVE* || true
                        
                        # 检查是否有原始文件名
                        if [ -n "\${BUILD_ARCHIVE_FILENAME}" ] && [ "\${BUILD_ARCHIVE_FILENAME}" != "null" ]; then
                            echo "✅ 使用原始文件名: \${BUILD_ARCHIVE_FILENAME}"
                            if [ -f "BUILD_ARCHIVE" ]; then
                                mv BUILD_ARCHIVE "\${BUILD_ARCHIVE_FILENAME}"
                            fi
                            ARCHIVE_FILE="\${BUILD_ARCHIVE_FILENAME}"
                        else
                            echo "⚠️  文件名为空或null，尝试检测文件类型"
                            # 使用 file 命令检测文件类型
                            FILE_TYPE=\$(file BUILD_ARCHIVE 2>/dev/null || echo "unknown")
                            echo "文件类型检测: \$FILE_TYPE"
                            
                            if echo "\$FILE_TYPE" | grep -q "Zip archive"; then
                                ARCHIVE_FILE="BUILD_ARCHIVE.zip"
                                mv BUILD_ARCHIVE "\$ARCHIVE_FILE"
                                echo "✅ 检测为ZIP文件，重命名为: \$ARCHIVE_FILE"
                            elif echo "\$FILE_TYPE" | grep -q "gzip compressed"; then
                                ARCHIVE_FILE="BUILD_ARCHIVE.tar.gz"
                                mv BUILD_ARCHIVE "\$ARCHIVE_FILE"
                                echo "✅ 检测为TAR.GZ文件，重命名为: \$ARCHIVE_FILE"
                            elif echo "\$FILE_TYPE" | grep -q "POSIX tar archive"; then
                                ARCHIVE_FILE="BUILD_ARCHIVE.tar"
                                mv BUILD_ARCHIVE "\$ARCHIVE_FILE"
                                echo "✅ 检测为TAR文件，重命名为: \$ARCHIVE_FILE"
                            else
                                ARCHIVE_FILE="BUILD_ARCHIVE"
                                echo "⚠️  无法识别文件类型，使用默认名称: \$ARCHIVE_FILE"
                            fi
                        fi
                        
                        echo "最终使用的文件名: \$ARCHIVE_FILE"
                        echo "ARCHIVE_FILE=\$ARCHIVE_FILE" > archive_info.env
                    """
                    
                    // 读取文件名信息
                    def archiveInfo = readFile('archive_info.env').trim()
                    def archiveFile = archiveInfo.split('=')[1]
                    env.ACTUAL_ARCHIVE_FILE = archiveFile
                    
                    echo "确定的归档文件: ${env.ACTUAL_ARCHIVE_FILE}"
                    
                    // 检测文件类型并解压 - 使用 Pipeline Utility Steps
                    script {
                        def uploadedArchive = env.ACTUAL_ARCHIVE_FILE
                        
                        echo "📋 文件信息:"
                        sh "ls -lh '${uploadedArchive}'"
                        
                        echo "📂 开始解压文件: ${uploadedArchive}"
                        
                        // 根据文件扩展名使用适当的 Pipeline Utility Steps
                        try {
                            if (uploadedArchive.endsWith('.zip')) {
                                echo "使用 Pipeline Utility Steps unzip 解压 ZIP 文件"
                                unzip zipFile: uploadedArchive, quiet: false
                                echo "✅ ZIP 文件解压完成"
                            } else if (uploadedArchive.endsWith('.tar.gz') || uploadedArchive.endsWith('.tgz')) {
                                echo "使用 Pipeline Utility Steps untar 解压 TAR.GZ 文件"
                                untar file: uploadedArchive, compression: 'gzip', quiet: false
                                echo "✅ TAR.GZ 文件解压完成"
                            } else if (uploadedArchive.endsWith('.tar')) {
                                echo "使用 Pipeline Utility Steps untar 解压 TAR 文件"
                                untar file: uploadedArchive, quiet: false
                                echo "✅ TAR 文件解压完成"
                            } else {
                                echo "⚠️  未知文件格式，尝试通用解压方法"
                                // 先尝试作为 ZIP 文件
                                try {
                                    echo "尝试按 ZIP 格式解压"
                                    unzip zipFile: uploadedArchive, quiet: false
                                    echo "✅ 按 ZIP 格式解压成功"
                                } catch (Exception zipEx) {
                                    echo "ZIP 解压失败，尝试按 TAR 格式解压"
                                    try {
                                        untar file: uploadedArchive, quiet: false
                                        echo "✅ 按 TAR 格式解压成功"
                                    } catch (Exception tarEx) {
                                        echo "TAR 解压失败，尝试按 TAR.GZ 格式解压"
                                        untar file: uploadedArchive, compression: 'gzip', quiet: false
                                        echo "✅ 按 TAR.GZ 格式解压成功"
                                    }
                                }
                            }
                        } catch (Exception e) {
                            echo "❌ Pipeline Utility Steps 解压失败: ${e.getMessage()}"
                            echo "回退到传统方法解压..."
                            
                            // 回退到传统命令行解压
                            if (uploadedArchive.endsWith('.zip')) {
                                echo "使用 Python 解压 ZIP 文件"
                                sh '''
                                    python3 -c "
import zipfile
import sys
try:
    with zipfile.ZipFile('${uploadedArchive}', 'r') as zip_ref:
        zip_ref.extractall('.')
    print('✅ Python ZIP 解压成功')
except Exception as e:
    print(f'❌ Python ZIP 解压失败: {e}')
    sys.exit(1)
                                    "
                                '''
                            } else if (uploadedArchive.endsWith('.tar.gz') || uploadedArchive.endsWith('.tgz')) {
                                echo "使用 tar 解压 TAR.GZ 文件"
                                sh "tar -xzf '${uploadedArchive}'"
                            } else if (uploadedArchive.endsWith('.tar')) {
                                echo "使用 tar 解压 TAR 文件"
                                sh "tar -xf '${uploadedArchive}'"
                            }
                        }
                        
                        echo "📁 解压后工作空间内容:"
                        sh "ls -la"
                    }
                    
                    // 验证构建目录和文件是否存在
                    sh """
                        if [ ! -d "${BUILD_CONTEXT_PATH}" ]; then
                            echo "❌ 错误: 构建目录 ${BUILD_CONTEXT_PATH} 不存在"
                            echo "📁 当前目录内容:"
                            find . -type d -maxdepth 2
                            exit 1
                        fi
                        
                        if [ ! -f "${DOCKERFILE_PATH}" ]; then
                            echo "❌ 错误: Dockerfile ${DOCKERFILE_PATH} 不存在"
                            echo "📁 构建目录内容:"
                            ls -la ${BUILD_CONTEXT_PATH}/
                            exit 1
                        fi
                        
                        echo "✅ 构建文件验证通过"
                        echo "📁 构建目录内容:"
                        ls -la ${BUILD_CONTEXT_PATH}/
                    """
                }
            }
        }

        stage("构建准备") {
            steps {
                script {
                    echo "🔧 构建准备阶段"
                    
                    // 处理唯一ID - 通常由Python脚本生成并传递
                    def uniqueId = params.BUILD_UNIQUE_ID
                    if (!uniqueId || uniqueId.trim().isEmpty()) {
                        uniqueId = "${new Date().format('yyyyMMddHHmmss')}-${BUILD_NUMBER}-${UUID.randomUUID().toString().substring(0, 8)}"
                        echo "📋 Jenkins生成唯一ID: ${uniqueId}"
                    } else {
                        echo "📋 使用传递的唯一ID: ${uniqueId}"
                    }
                    env.ACTUAL_UNIQUE_ID = uniqueId
                    
                    // 处理平台配置
                    def platformsStr = params.BUILD_PLATFORMS
                    echo "🔍 原始平台参数: '${platformsStr}'"
                    
                    def platforms = platformsStr.split(',')
                    def platformsInfo = []
                    
                    echo "🏗️  多平台构建配置:"
                    echo "   选择的平台: ${platformsStr}"
                    echo "   分割后平台数量: ${platforms.length}"
                    
                    for (platform in platforms) {
                        def cleanPlatform = platform.trim()
                        platformsInfo.add(cleanPlatform)
                        echo "   - 平台: '${cleanPlatform}'"
                    }
                    
                    env.PLATFORM_LIST = platformsInfo.join(',')
                    env.IS_MULTI_PLATFORM = (platforms.length > 1).toString()
                    
                    echo "🔍 环境变量设置:"
                    echo "   PLATFORM_LIST: '${env.PLATFORM_LIST}'"
                    echo "   IS_MULTI_PLATFORM: '${env.IS_MULTI_PLATFORM}'"
                    
                    echo "📋 构建配置信息:"
                    echo "   应用名称: ${params.APP_NAME}"
                    echo "   应用版本: ${params.APP_VERSION}" 
                    echo "   构建唯一ID: ${uniqueId}"
                    echo "   镜像名称: ${IMAGE_NAME}"
                    echo "   镜像标签: ${IMAGE_TAG}"
                    echo "   Harbor 仓库: ${HARBOR_REGISTRY}"
                    echo "   项目: ${HARBOR_PROJECT}"
                    echo "   构建平台: ${env.PLATFORM_LIST}"
                    echo "   多平台构建: ${env.IS_MULTI_PLATFORM}"
                    
                    // 显示构建信息
                    sh """
                        echo "=== 构建信息 ==="
                        echo "构建号: ${BUILD_NUMBER}"
                        echo "构建唯一ID: ${uniqueId}"
                        echo "构建时间: \$(date)"
                        echo "构建节点: \$(hostname)"
                        echo "Jenkins URL: ${JENKINS_URL}"
                        echo "原始文件名: \${BUILD_ARCHIVE_FILENAME:-'未设置'}"
                        echo "实际使用文件: ${env.ACTUAL_ARCHIVE_FILE}"
                        echo "构建平台: ${env.PLATFORM_LIST}"
                        echo "多平台模式: ${env.IS_MULTI_PLATFORM}"
                    """
                }
            }
        }

        stage("多平台镜像构建") {
            steps {
                script {
                    def platforms = env.PLATFORM_LIST.split(',')
                    
                    echo "🚀 开始多平台并行构建"
                    echo "=" * 80
                    echo "📋 构建概览:"
                    echo "   🎯 构建平台数量: ${platforms.length}"
                    echo "   🏗️  构建模式: ${env.IS_MULTI_PLATFORM == 'true' ? '多平台并行' : '单平台'}"
                    
                    for (platform in platforms) {
                        def cleanPlatform = platform.trim()
                        def platformArch = cleanPlatform.replace('linux/', '')
                        echo "   📦 ${cleanPlatform} -> ${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}"
                    }
                    
                    echo "=" * 80
                }
            }
        }
        
        stage("并行构建执行") {
            failFast true  // 任一构建失败时快速终止其他并行任务
            parallel {
                stage('🔨 AMD64 构建流水线') {
                    when {
                        expression { 
                            return env.PLATFORM_LIST.contains('linux/amd64')
                        }
                    }
                    steps {
                        script {
                            echo "┌─────────────────────────────────────────┐"
                            echo "│         🖥️  AMD64 构建开始              │"
                            echo "└─────────────────────────────────────────┘"
                            echo "🎯 目标平台: linux/amd64"
                            echo "🏷️  镜像标签: ${IMAGE_TAG}-amd64"
                            echo "⏰ 开始时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                            
                            buildPlatformImage('linux/amd64', 'amd64')
                        }
                    }
                    post {
                        success {
                            script {
                                echo "┌─────────────────────────────────────────┐"
                                echo "│      ✅ AMD64 构建成功完成              │"
                                echo "└─────────────────────────────────────────┘"
                                echo "🎉 AMD64 平台镜像构建并推送成功"
                                echo "📦 推送镜像:"
                                echo "   • ${IMAGE_NAME}:${IMAGE_TAG}-amd64"
                                echo "   • ${IMAGE_NAME}:latest-amd64"
                                echo "⏰ 完成时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                            }
                        }
                        failure {
                            script {
                                echo "┌─────────────────────────────────────────┐"
                                echo "│      ❌ AMD64 构建失败                  │"
                                echo "└─────────────────────────────────────────┘"
                                echo "💥 AMD64 平台构建过程中发生错误"
                                echo "⏰ 失败时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                            }
                        }
                    }
                }
                
                stage('🔨 ARM64 构建流水线') {
                    when {
                        expression { 
                            return env.PLATFORM_LIST.contains('linux/arm64')
                        }
                    }
                    steps {
                        script {
                            echo "┌─────────────────────────────────────────┐"
                            echo "│         💪 ARM64 构建开始              │"
                            echo "└─────────────────────────────────────────┘"
                            echo "🎯 目标平台: linux/arm64"
                            echo "🏷️  镜像标签: ${IMAGE_TAG}-arm64"
                            echo "⏰ 开始时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                            
                            buildPlatformImage('linux/arm64', 'arm64')
                        }
                    }
                    post {
                        success {
                            script {
                                echo "┌─────────────────────────────────────────┐"
                                echo "│      ✅ ARM64 构建成功完成              │"
                                echo "└─────────────────────────────────────────┘"
                                echo "🎉 ARM64 平台镜像构建并推送成功"
                                echo "📦 推送镜像:"
                                echo "   • ${IMAGE_NAME}:${IMAGE_TAG}-arm64"
                                echo "   • ${IMAGE_NAME}:latest-arm64"
                                echo "⏰ 完成时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                            }
                        }
                        failure {
                            script {
                                echo "┌─────────────────────────────────────────┐"
                                echo "│      ❌ ARM64 构建失败                  │"
                                echo "└─────────────────────────────────────────┘"
                                echo "💥 ARM64 平台构建过程中发生错误"
                                echo "⏰ 失败时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                            }
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        echo "🏁 并行构建阶段完成"
                        echo "=" * 60
                    }
                }
            }
        }



        stage("🎯 构建结果汇总") {
            steps {
                script {
                    echo "╔═══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                           📊 多平台构建结果汇总                              ║"
                    echo "╚═══════════════════════════════════════════════════════════════════════════════╝"
                    
                    def platforms = env.PLATFORM_LIST.split(',')
                    def builtPlatforms = []
                    def totalImages = 0
                    
                    // 检查每个平台是否被构建
                    for (platform in platforms) {
                        def cleanPlatform = platform.trim()
                        if (cleanPlatform == 'linux/amd64' || cleanPlatform == 'linux/arm64') {
                            builtPlatforms.add(cleanPlatform)
                            totalImages += 2  // 每个平台构建2个镜像（version + latest）
                        }
                    }
                    
                    echo ""
                    echo "┌─────────────────────────────────────────────────────────────────────────────┐"
                    echo "│                              🏗️  构建配置信息                               │"
                    echo "└─────────────────────────────────────────────────────────────────────────────┘"
                    echo "📋 应用名称: ${params.APP_NAME}"
                    echo "📋 应用版本: ${params.APP_VERSION}"
                    echo "📋 构建策略: ${params.IMAGE_TAG_STRATEGY}"
                    echo "📋 镜像标签: ${IMAGE_TAG}"
                    echo "📋 构建模式: ${env.IS_MULTI_PLATFORM == 'true' ? '🔄 多平台并行' : '🔄 单平台'}"
                    echo "📋 构建平台: ${builtPlatforms.size()} 个 (${builtPlatforms.join(', ')})"
                    echo "📋 镜像总数: ${totalImages} 个"
                    echo "📋 构建唯一ID: ${env.ACTUAL_UNIQUE_ID}"
                    echo "📋 Harbor 仓库: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}"
                    
                    echo ""
                    echo "┌─────────────────────────────────────────────────────────────────────────────┐"
                    echo "│                              📦 成功构建的镜像清单                           │"
                    echo "└─────────────────────────────────────────────────────────────────────────────┘"
                    
                    for (platform in builtPlatforms) {
                        def platformArch = platform.replace('linux/', '')
                        def platformIcon = platform.contains('amd64') ? '🖥️' : '💪'
                        
                        echo "${platformIcon} 平台: ${platform}"
                        echo "   ├─ 🎯 ${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}"
                        echo "   └─ 🏷️  ${IMAGE_NAME}:latest-${platformArch}"
                        echo ""
                    }
                    
                    echo "┌─────────────────────────────────────────────────────────────────────────────┐"
                    echo "│                              🔗 镜像使用指南                                │"
                    echo "└─────────────────────────────────────────────────────────────────────────────┘"
                    
                    for (platform in builtPlatforms) {
                        def platformArch = platform.replace('linux/', '')
                        def platformName = platform.contains('amd64') ? 'AMD64 (x86_64)' : 'ARM64 (aarch64)'
                        def platformIcon = platform.contains('amd64') ? '🖥️' : '💪'
                        
                        echo "${platformIcon} ${platformName} 平台使用:"
                        echo "   # 拉取指定版本镜像"
                        echo "   docker pull ${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}"
                        echo "   # 拉取最新版本镜像"
                        echo "   docker pull ${IMAGE_NAME}:latest-${platformArch}"
                        echo "   # 运行容器"
                        echo "   docker run -d --name ${params.APP_NAME}-${platformArch} ${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}"
                        echo ""
                    }
                    
                    echo "┌─────────────────────────────────────────────────────────────────────────────┐"
                    echo "│                              🔍 Harbor 仓库信息                             │"
                    echo "└─────────────────────────────────────────────────────────────────────────────┘"
                    echo "🌐 仓库地址: ${HARBOR_REGISTRY}"
                    echo "📁 项目名称: ${HARBOR_PROJECT}"
                    echo "🗂️  镜像仓库: ${params.APP_NAME}"
                    echo "🔗 Web 控制台: ${HARBOR_REGISTRY}/harbor/projects/${HARBOR_PROJECT}/repositories/${params.APP_NAME}"
                    echo "📊 API 端点: ${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${params.APP_NAME}/artifacts"
                    
                    echo ""
                    echo "╔═══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║  ✅ 多平台构建成功完成！共构建 ${builtPlatforms.size()} 个平台，${totalImages} 个镜像  ║"
                    echo "╚═══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // 可以添加 Harbor API 调用来验证镜像
                    // sh "curl -s -u admin:password ${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${params.APP_NAME}/artifacts"
                }
            }
        }
    }

    post {
        always {
            script {
                echo ""
                echo "┌─────────────────────────────────────────────────────────────────────────────┐"
                echo "│                              🧹 构建环境清理                                │"
                echo "└─────────────────────────────────────────────────────────────────────────────┘"
                echo "⏰ 构建结束时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                echo "🔢 构建编号: ${BUILD_NUMBER}"
                echo "⏱️  构建耗时: ${currentBuild.duration ? (currentBuild.duration / 1000).intValue() + ' 秒' : '计算中...'}"
            }
        }
        success {
            script {
                def platforms = env.PLATFORM_LIST?.split(',') ?: []
                def builtCount = 0
                def imageList = []
                
                for (platform in platforms) {
                    def cleanPlatform = platform.trim()
                    if (cleanPlatform == 'linux/amd64' || cleanPlatform == 'linux/arm64') {
                        def platformArch = cleanPlatform.replace('linux/', '')
                        builtCount++
                        imageList.add("${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}")
                        imageList.add("${IMAGE_NAME}:latest-${platformArch}")
                    }
                }
                
                echo ""
                echo "╔═════════════════════════════════════════════════════════════════════════════╗"
                echo "║                              🎉 构建成功完成！                              ║"
                echo "╚═════════════════════════════════════════════════════════════════════════════╝"
                echo ""
                echo "📊 构建统计:"
                echo "   🏗️  构建平台: ${builtCount} 个"
                echo "   📦 生成镜像: ${imageList.size()} 个"
                echo "   🎯 应用名称: ${params.APP_NAME}"
                echo "   📝 应用版本: ${params.APP_VERSION}"
                echo "   🏷️  镜像标签: ${IMAGE_TAG}"
                
                echo ""
                echo "📦 成功推送的镜像:"
                for (image in imageList) {
                    echo "   ✅ ${image}"
                }
                
                echo ""
                echo "🔗 快速访问:"
                echo "   🌐 Harbor 控制台: ${HARBOR_REGISTRY}/harbor/projects/${HARBOR_PROJECT}/repositories/${params.APP_NAME}"
                echo "   📋 构建详情: ${BUILD_URL}"
                echo "   📊 构建日志: ${BUILD_URL}console"
                
                // 可以在这里添加成功通知，比如发送到企业微信、钉钉等
                // notifySuccess()
            }
        }
        failure {
            script {
                echo ""
                echo "╔═════════════════════════════════════════════════════════════════════════════╗"
                echo "║                              ❌ 构建失败！                                 ║"
                echo "╚═════════════════════════════════════════════════════════════════════════════╝"
                echo ""
                echo "💥 构建失败信息:"
                echo "   🔢 构建编号: ${BUILD_NUMBER}"
                echo "   ⏰ 失败时间: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                echo "   🎯 应用名称: ${params.APP_NAME}"
                echo "   📝 应用版本: ${params.APP_VERSION}"
                echo "   🏗️  目标平台: ${env.PLATFORM_LIST ?: '未知'}"
                
                echo ""
                echo "🔍 故障排查:"
                echo "   📋 查看完整日志: ${BUILD_URL}console"
                echo "   📊 构建详情: ${BUILD_URL}"
                echo "   🔧 重新构建: ${BUILD_URL}rebuild"
                
                echo ""
                echo "💡 常见问题检查:"
                echo "   • 检查 Dockerfile 语法是否正确"
                echo "   • 验证构建上下文文件是否完整"
                echo "   • 确认 Harbor 仓库连接正常"
                echo "   • 检查平台参数是否正确"
                
                // 可以在这里添加失败通知
                // notifyFailure()
            }
        }
    }
}

// 生成镜像标签的函数
def generateImageTag() {
    def strategy = params.IMAGE_TAG_STRATEGY ?: 'version-build'
    
    switch(strategy) {
        case 'version-build':
            return "${params.APP_VERSION}"
        case 'timestamp':
            return "${params.APP_VERSION}-${new Date().format('yyyyMMdd-HHmmss')}"
        case 'latest':
            return 'latest'
        default:
            return "${params.APP_VERSION}"
    }
}

// 解析平台列表的函数
def parsePlatforms(platformsStr) {
    return platformsStr.split(',').collect { it.trim() }.join(',')
}

// 构建指定平台镜像的函数
def buildPlatformImage(String platform, String platformArch) {
    container(name: 'kaniko', shell: '/busybox/sh') {
        // 构建开始日志
        echo "┌─────────────────────────────────────────────────────────────┐"
        echo "│  🔧 ${platform.toUpperCase()} 构建环境准备                   │"
        echo "└─────────────────────────────────────────────────────────────┘"
        echo "🎯 构建平台: ${platform}"
        echo "🏗️  架构标识: ${platformArch}"
        echo "🏷️  镜像前缀: ${IMAGE_NAME}"
        echo "📝 构建标签: ${IMAGE_TAG}-${platformArch}"
        
        sh """#!/busybox/sh
            echo ""
            echo "┌─────────────────────────────────────────────────────────────┐"
            echo "│  📋 ${platform.toUpperCase()} 构建环境检查                   │"
            echo "└─────────────────────────────────────────────────────────────┘"
            
            # 显示 Kaniko 版本信息
            echo "🔍 Kaniko 版本信息:"
            /kaniko/executor version | head -3
            
            # 显示构建参数
            echo ""
            echo "🔍 构建参数:"
            echo "   平台: ${platform}"
            echo "   架构: ${platformArch}"
            echo "   Dockerfile: ${DOCKERFILE_PATH}"
            echo "   构建上下文: ${BUILD_CONTEXT_PATH}"
            echo "   目标镜像: ${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}"
            echo "   Latest标签: ${IMAGE_NAME}:latest-${platformArch}"
            
            # 验证 Dockerfile 存在
            echo ""
            echo "🔍 文件验证:"
            if [ ! -f "${DOCKERFILE_PATH}" ]; then
                echo "❌ 错误: Dockerfile 不存在: ${DOCKERFILE_PATH}"
                exit 1
            fi
            echo "✅ Dockerfile 验证通过: ${DOCKERFILE_PATH}"
            
            # 显示构建上下文（简化版）
            echo "✅ 构建上下文验证通过: ${BUILD_CONTEXT_PATH}"
            echo "📂 构建文件数量: \$(find ${BUILD_CONTEXT_PATH} -type f | wc -l)"
            
            echo ""
            echo "┌─────────────────────────────────────────────────────────────┐"
            echo "│  🔨 ${platform.toUpperCase()} 开始执行镜像构建               │"
            echo "└─────────────────────────────────────────────────────────────┘"
            echo "⏰ 构建开始时间: \$(date '+%Y-%m-%d %H:%M:%S')"
            echo ""
            
            # 执行镜像构建和推送
            /kaniko/executor \\
                --dockerfile=${DOCKERFILE_PATH} \\
                --context=${BUILD_CONTEXT_PATH} \\
                --destination=${IMAGE_NAME}:${IMAGE_TAG}-${platformArch} \\
                --destination=${IMAGE_NAME}:latest-${platformArch} \\
                --custom-platform=${platform} \\
                --build-arg=TARGETARCH=${platformArch} \\
                --build-arg=BUILDPLATFORM=${platform} \\
                --build-arg=BUILD_DATE="\$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \\
                --cache=true \\
                --cache-ttl=24h \\
                --cleanup \\
                --verbosity=info
            
            # 构建结果检查
            BUILD_RESULT=\$?
            echo ""
            echo "┌─────────────────────────────────────────────────────────────┐"
            if [ \$BUILD_RESULT -eq 0 ]; then
                echo "│  ✅ ${platform.toUpperCase()} 构建和推送成功                 │"
            else
                echo "│  ❌ ${platform.toUpperCase()} 构建失败 (退出码: \$BUILD_RESULT) │"
            fi
            echo "└─────────────────────────────────────────────────────────────┘"
            echo "⏰ 构建完成时间: \$(date '+%Y-%m-%d %H:%M:%S')"
            
            if [ \$BUILD_RESULT -eq 0 ]; then
                echo ""
                echo "📦 成功推送的镜像:"
                echo "   🎯 ${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}"
                echo "   🎯 ${IMAGE_NAME}:latest-${platformArch}"
                echo ""
                echo "🔗 镜像拉取命令:"
                echo "   docker pull ${IMAGE_NAME}:${IMAGE_TAG}-${platformArch}"
                echo "   docker pull ${IMAGE_NAME}:latest-${platformArch}"
            else
                echo ""
                echo "💥 构建失败，请检查上述错误信息"
                exit \$BUILD_RESULT
            fi
        """
    }
} 